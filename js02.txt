一.运算符
	运算符的三要素:优先级,结合方向,操作目数;
	1.算数运算符:
		+,-,*,/,%取余;
	2.赋值运算符:优先级极低;
		=,+=,-=,*=,/=,
	   赋值表达式也是具有值的,该值为表达式的右值;
	3.复合赋值运算符:
	  +=,注意:中间不能出现空格;
	  a+=5;就等价与a=a+6;
	4.自增,自减运算;
	++i;
	i++;
	--i;
	i--;
	前++,或者前--,都是先进行递增之后在带入到公式中计算;
	后++,或者后--,都是先进行计算之后在进行递增或者递减;
	当出现后++时,过了本行语句的分号之后数据发生变化;
	eg: var i=5;
	    console.log(i++)=5;
	    console.log(++i)=7;
	5.关系运算符:
	>,<,>=,<=,==,!=,===;
	关系表达式:
		通过关系运算符链接的表达式,且该表达式的取值为布尔类型;
	== 逻辑等;
		var a=123;
		var b=1456;
		console.log(a==b)'false'
	注意:逻辑等和赋值一定要有区别;
	=== 严格等;
		逻辑数据类型是哪个都要相等;
	!= 不等号
	6.逻辑运算符parse
		&& 与
		|| 或
		! 非
		逻辑运算符通常与关系表达式和逻辑量链接构成逻辑表达式
	console.log(3<4 && 1>2) "false"
	consloe.log(!true || true)
	短路与和短路或
		短路与:若干个表达式相连,首次出现失败条件时,则后续表达式不会运算;
		短路或:若干表达式先练,首次出现失败条件时,则后续的表达式不会进行过运算;
	7.数据之间的转换
		隐式转换和显式转换;
		隐式转换:自动转换
		显式转换:手动转换;
		隐式转换:
			1.使用加法时,转换结果是字符串;
			2.除使用加法时,凡是能够运算的运算符军转换为number类型;
		nan not a number :两个字符串进行加减运算是会将其转换为nan类型;
		显式转换:
			1.将字符串转换为其他类型:
					parseInt();
						作用:1.将string类型转换成为int整型
						      2. 会给浮点数据取整; console.log(parseInt());
			2.转换成为浮点型:
					parseFloat()
						作用:1.将数据转换成为浮点数;console.log(parseFloat());
			3.转换成为Number型:
					Number()
						作用:将数据转换成为Number类型 console.log(Number(a));
			4.将数据转换成为字符串:
					.toString:
						作用:将数据转换成为字符串:
							var a=123;
							console.log(a.toString(a)+1)				
	8.程序结构化设计:
			顺序
			循环
			选择
		1.if条件语法结构:
				if(条件表达式){
					复合语句
					}
		2.if(条件表达式){
			语句1;

                      }else if(条件2){

			语句2;
                      }else{
		      	所有条件的对立面;
		      }
		备注:1.if else 中的所有语句条件都是互斥的;
		     2. if嵌套不能超过5层;
		     3. if else 的匹配一定呀和同级别的匹配;	