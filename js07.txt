day-07
	一.Json对象
		json是一种数据格式,可以将一个复杂的对象,进行封装描述
		json的数据以键值对的方式存储,
	1.严格模式
		"use strict" 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。
		它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。
		"use strict" 的目的是指定代码在严格条件下执行。
		严格模式下你不能使用未声明的变量。

		语法：
		"use strict"
		浏览器支持：
		IE10+??firefox 4+ Safari 5.1+ Chrome

		Demo:
????	"use strict";
????	x = 3.14;???????// 报错 (x 未定义)

????	"use strict";
????	myFunction();
????	function myFunction() {
????????	y = 3.14;???// 报错 (y 未定义)
????	}

		只在函数内使用严格模式:在函数内部声明是局部作用域
???	?	x = 3.14;???????// 不报错
????	myFunction();

????	function myFunction() {
???????		"use strict";
???????	?y = 3.14;???// 报错 (y 未定义)
???	?	}

		为什么使用严格模式:
		消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;
		消除代码运行的一些不安全之处，保证代码运行的安全；
		提高编译器效率，增加运行速度；
		为未来新版本的Javascript做好铺垫。

		浏览器支持：
		IE10+??firefox 4+ Safari 5.1+ Chrome

	2.ES5新增的数组的方法
		indexOf：在数组中查找一个数所在的位置
		indexOf(查找的元素);
		返回值:查找元素的下标
???	?	var a = [11,22,33,44,55];
????	document.write(a.indexOf(-7));
		如果数组中存在查找元素，则返回该元素的下标，若不存在，则返回-1。


		数组元素去重：
????		var a = [1,1,2,2,3,3,4,4,5,5,1];
???	?		var b = [];
????
????	for(var i=0; i<a.length; i++){
????????	if(b.indexOf(a[i]) == -1){
????????????b.push(a[i]);
????????	}
????	}

	回调函数:

	forEach：对数组的每个元素做某个处理（函数的方式）,没有返回值，直接改变当前数组。
	注意：foEach()函数的参数是个回调函数，forEach对应的回调函数有三个参数（数组元素内容，元素索引，数组本身）

	返回值:无

????var a = [11,22,33,44,55];
????function incarse(x,index,a){
????????a[index] = x + 2;
????}
????a.forEach(incarse);
????document.write(a);
????var a = [11,22,33,44,55];
????function incarse(x,index,a){
????????if(index == 2){
????????????a[index] = 666;
????????}
????}
????a.forEach(incarse);
????document.write(a);


	map：把原始数组的每个元素进行某种处理后，返回（映射）一个新的数组。回调函数参数是数组元素本身。
		注意:map()对应的回调函数有三个参数（数组元素内容，元素索引，数组本身）
		map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
		map() 方法按照原始数组元素顺序依次处理元素。

	问题：forEach与map有什么区别?
		在于返回值:forEach无返回值
? ? ? ? ? 	map返回一个新的数组
???		var a = [11,22,33,44,55];
????	function incarse(x,index,a){
????????if(index == 2){
????????????a[index] = x + 8;
????????}
????????return a[index];
????	}
???	var b = a.forEach(incarse);
???	var c = a.map(incarse);
???	document.write(b);
???	document.write(c);

	filter: 过滤的意思，根据条件过滤数组的元素，filter的回调函数需要返回的是boolean类型的值。
	注意:? ? filter()对应的回调函数有三个参数（数组元素内容，元素索引，数组本身）
	注意：?filter() 不会改变原始数组。
	将满足条件的元素重新生成一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。
	var a = [11,22,33,44,55];
	function myFilter(x,index,arr){
????????if(x%2==0){
????????????return x;
????????}
????}
	var b = a.filter(myFilter);
	for(var i=0; i<b.length; i++){
????????console.log(b[i]);
	?}

	reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。


? ??	var a = [1,2,3,4,5];
????function add(total,x,index,arr){
????????total += x;
????????return total;
????}
????
????var x = a.reduce(add)；
????console.log(x);

3.字符串的定义和创建
1、var str=‘亲’；? ? ? ? ? ? ? ? ? ? ? ?基本类型(两者本质其实一样，只是这样的空间开辟在静态)
? ?定义一个字符串变量str，内容为‘亲’
2、var str = new String(“hello”);???????引用类型
???定义一个字符串变量str，内容为hello，
? ?注意此刻str为object(对象)类型
? ?用new产生的变量都是引用类型的变量，也叫对象。
var s1 = "string";
var s2 = new String("string");
console.log(typeof(s1)); //输出的是 string
console.log(typeof(s2)); //输出的 object
4.ASCII码表
就是一个标准，把每个字符与一个0-255的数字对应起来，这样就可以把字符变为数字，而后变为二进制码了。

var str1 = "b";
????
document.write(str1.charCodeAt());

13--->回车
32--->space
48--->字符0
65--->A
97--->a

//输入一个字符串，统计字符串中有多少个大写字母，小写字母，数字,空格，其他字符
????var str = "12a45bcAAB+#$%^";
????var count1 = 0;
????var count2 = 0;
????var count3 = 0;
????var count4 = 0;
????
????for(var i=0; i<str.length; i++){
????????if(str.charAt(i) >= 'A' && str.charAt(i)<='Z'){
????????????count1++;
????????}else if(str.charAt(i) >= 'a' && str.charAt(i)<='z'){
????????????count2++;
????????}else if(str.charAt(i) >= '0' && str.charAt(i)<='9'){
????????????count3++;
????????}else{
????????????count4++;
????????}
????}
????
????console.log(count1,count2,count3,count4);

5.字符串常见API和属性
字符串的属性
length：表示字符串的长度；
如 :??
?? ?var str=“how are you”;
?? ?alert(str.length);

charAt(3)???//获取下标为3的字符 等价于str[3]
charCodeAt(3)???//获取下标为3的字符的编码
fromCharCode(94) //编码转换成字符
document.write(String.fromCharCode(97,98));

indexOf("abc")? ? ? ? 查找字符串第一次出现的位置
lastIndexOf("abc")????查找字符串最后一次出现的位置??如果没找到??返回-1

replac(src,dest)?
var str1 = "hello world hello laowang";
????var str2 = str1.replace("hello","heihei");????
????document.write(str2);

【注意】:这里的替换只能执行一次，不能够进行全局匹配，而且区分大小写，如果需要全局匹配，
则应使用正则表达式： str.replace(/hello/gi,“old are”) ：表示把str中所有的are，
全部替换为 old are，g表示进行全局匹配，i表示匹配的时候忽略大小写。
var str1 = "hello world hello laowang";
var str2 = str1.replace(/hello/gi,"heihei");????
document.write(str2);

截取字符串：
slice（start,end） 提取字符串的某个部分，并以新的字符串返回被提取的部分。
??两个参数表示截取的开始下标和结束下标。
substring(start,stop) 提取字符串中介于两个指定下标之间的字符，并以新的字符串返回被提取的部分。
??两个参数表示截取的开始下标和结束下标。

区别： slice参数支持负数（从后往前算，负数的时候左开右闭），substring不支持。
????var str1 = "helloworld";
????document.write(str1.slice(-5,-2));

字符串分割：
split(分割符号) :根据分隔符、拆分成数组
????var str1 = "hello*world*hello*lao*wang";
????var a = str1.split("*");
????
????for(var t in a){
????????document.write(a[t] + " ");
????}

toLowerCase、toUpperCase	