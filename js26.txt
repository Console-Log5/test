day--26
	一.匿名函数
		*概念:
			没有名字的函数就是匿名函数,当某个函数,function()关键字后面没有标识符的时候那么他就是一个匿名函数
		匿名函数的定义方法:
			1.function(){
				console.log("无名函数");
			}
			2.function test(){
				console.log("匿名函数")
			}
			window.onload=test//调用匿名函数;
			3.var test=function(){
				
			}
			test();
		结论:函数可以赋值给一个变量,(其实函数是一个对象),所以函数名作为另个函数的参数就好理解,
	二.自运行函数:
		能够自己运行的一个函数,即,不用别人调用就能够运行的函数;
		自运行的函数写法
			写法一:
				最外面添加括号:
				(function(){
					console.log("hahah");
				})
			写法二:
				最后的括号前面加括号:
				(function(){
					
					console.log("hehehe");
				})
			写法三:
				function前面加运算符,常见的是!与void
				!function fun(){
					console.log("1111");
				}
				void function fun(){
					console.log("22222");
				}
		匿名函数的常见用法:
				*函数表达式;
				*事件处理函数
				*自运行;
				*闭包里的返回值;
	三.闭包函数:
		在javascript语言中,只有函数内部的子函数才能读取局部变量,因此可以吧闭包理解成为,定义在一个函数内部的函数;
		通俗理解闭包:
			闭包是指有权访问的另一个函数,作用域中的变量的函数,可以理解为(能够读取其他,函数内部变量的函数);
		闭包的作用1:
			可以读取函数内部的变量,让这些变量的值,始终保持在内存中;
		闭包的作用2:
			块级作用域;
	四.闭包的注意事项:
		1.由于闭包会使得函数中的变量被保存在内存中,内存的消耗会特别大,所以不能,乱用闭包,乱用闭包可能会造成网页性能的问题,在IE中造成内存泄露;
		2.闭包会在父函数外部改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，
		把闭包当作它的公用方法（Public Method），
		把内部变量当作它的私有属性（private value），
		这时一定要小心，不要随便改变父函数内部变量的值。
	五.函数的对象:
		1.说明:函数也是一个对象;
			通过new实例化一个Function()对象 ;
			function对象具有两个参数"形参列表","函数体";
	 		let fun=new Function("a","b","console.log(a+b);");
	 		fun(1,2);
			let fun1=new Function("a","b","console.log(a*b);");
		 	fun1(20,30);
		2.如果函数是一个对象,那么这个对象就一定会有属于它自己的属性和方法;

		3.函数是功能完整的类
??????		ECMAScript 中函数实际上是功能完整的对象。即函数就是一个对象
		4.函数名作为参数(回调函数)和返回值(闭包函数)：
????	函数名能作为返回值，那么匿名函数也就可以作为返回值。

	六.函数的内置方法和属性:
		函数内置对象（ arguments和this），自动产生，不需要用函数名来调用.
		
		arguments是一个伪数组.

	 	arguments的作用类似与一个数组,可以将函数中的每个参数通过类似于数组的方法遍历出来;
	
	 	arguments对象不但保存着所有的参数，而且还有一个名叫callee的属性。

	 	Callee属性是个指针，指向了arguments对象所在的函数

		prototype属性:
?????????对于引用类型来说，prototype保存着所有实例方法的真正所在，即所有的实例方法都是在prototype中保存着，平时，我们在使用实例方法时，

?????????虽然用对象直接调用，但是真正的保存是在prototype中。在继承中prototype的作用更加明显:

???????我们创建的每个函数都有一个属性是prototype（原型），这是属性是个指针，指向一个对象，该对象的用途是包含所有实例共享的属性和方法。

???????所有通过同一个构造函数创建的实例对象，都会共享同一个prototype。