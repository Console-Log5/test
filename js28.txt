day--28

一.localStorage和sessionStorage功能
	早期的web中使用cookies在客户端保存诸如用户名等简单的信息，但是，在使用cookies存储永久数据存在以下问题。
	1.cookies的大小限制在4kB，不适合大量的数据存储。
	2.浏览器还限制站点可以在用户计算机上存储的cookies的数量。
	3 cookies是随HTTP事务一起被发送的，因此会浪费一部分带宽。
	HTML5很好的提供了本地存储的功能，以键值对存储的解决方案，支持容量至少为4M，HTML5的web提供了两种客户端存储方式。
	localStorage：是一种没有时间限制的数据存储方式，可以将数据永久保存在客户端。
	sessionStorage：指的是针对一个session的数据存储，即将数据保存在session对象中，当关闭浏览器后，
	这些数据就被删除。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。
二.设计模式是什么:
	背景：
	目前企业级分布式软件开发普遍采用面向对象的方法，OOD（面向对象设计）直接导致了设计模式的发展。
 	开发面向对象的软件是困难的，而开发可复用的面向对象的软件更难。
	有经验的设计者重用过去的方案。
	采用设计模式使设计和代码具有良好的可维护性、可复用性和可升级性。
	
三.采用设计模式的好处:
	尽量用一种标准的方式描述设计经验
	为设计者提供一种通用的语言
	增加复用性，减少设计的多样性
	增强设计变更的灵活性
	提高设计文档的质量
	增强设计的可理解性

四.单例模式:
	单例模式指的是一个类只能有一个实例，这样的类被称为单例类，或者单态类，即Singleton Class
	单例类的特点
	单例类只可有一个实例
	它必须自己创立这唯一的一个实例
	它必须给所有其它的类提供自己这一实例
	对于灵活的JS来说，任何问题都能找到 n 种答案，只不过让我自己去掂量孰优孰劣而已，下面就列举闭包实现单例模式的方法，无非也就是将创建了的单例缓存而已。
let singletion = (function (newId,newName){
??var unique;
??function Student(newId,newName){
????this.id = newId;
????this.name = newName;
??}
??if(unique==undefined){
????unique = new Student(newId,newName);
??}
???return function(){
????return unique;
????????};
??})(1,"小明");//切记必须自运行 为什么呢
let s1 = singletion();
let s2 = singletion();
s1.id = 666;
console.log(s1.id,s2.id);
console.log(s1 === s2);
五.观察者模式:

观察者模式是软件设计模式的一种常见的设计模式，又称发布订阅模式,在这种模式中，
并不是单纯的一个对象调用另一个对象的方法，而是一个对象订阅另一个对象的特定活动并在其状态发生改变后获得通知，然后执行相应的操作。
订阅者也称为观察者，而被观察的对象则被称为发布者或主题。当一个事件发生，发布者将会向所有订阅此事件的对象以事件对象的形式传递消息。
要素:
观察者模式最重要的两个要素是：发布者、订阅者（观察者），发布者发送消息，订阅者订阅特定消息并接受发布者发送的消息。